{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neutron Powder Diffraction\n",
    "\n",
    "In this tutorial demonstrates how neutron-scattering data can be loaded, visualized, and manipulated with generic functionality from `scipp` as well as neutron-specific functionality from `scippneutron`. It focuses on reducing data from the ORNL [POWGEN](https://neutrons.ornl.gov/powgen) neutron diffractometer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipp as sc\n",
    "import scippneutron as scn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Loading Nexus files\n",
    "\n",
    "Loading Nexus files requires [Mantid](https://www.mantidproject.org).\n",
    "See, e.g., [Installation](https://scipp.github.io/getting-started/installation.html) on how to install scipp and Mantid with `conda`.\n",
    "We are using two files in this tutorial,\n",
    "[PG3_4844_event.nxs](http://198.74.56.37/ftp/external-data/MD5/d5ae38871d0a09a28ae01f85d969de1e)\n",
    "and\n",
    "[PG3_4866_event.nxs](http://198.74.56.37/ftp/external-data/MD5/3d543bc6a646e622b3f4542bc3435e7e).\n",
    "Both are available as part of Mantid's test data.\n",
    "\n",
    "Rename the files upon download.\n",
    "\n",
    "We start by loading two files: the sample and the vanadium runs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = scn.load(filename='PG3_4844_event.nxs',\n",
    "                  load_pulse_times=False,\n",
    "                  mantid_args={'LoadMonitors': True})\n",
    "vanadium = scn.load(filename='PG3_4866_event.nxs',\n",
    "                    load_pulse_times=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The optional `mantid_args` dict is forwarded to the Mantid algorithm used for loading the files &ndash; in this case [LoadEventNexus](https://docs.mantidproject.org/nightly/algorithms/LoadEventNexus-v1.html) &ndash; and can be used to control, e.g., which part of a file to load.\n",
    "Here we request loading monitors, which Mantid does not load by default.\n",
    "The resulting dataset looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.plot(sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instrument view\n",
    "\n",
    "Scipp provides a simple 3D instrument view inpired by Mantid's own [instrument view](https://www.mantidproject.org/MantidPlot:_Instrument_View), which can be used to take a quick look at the neutron counts on the detector panels in 3D space or using various cylindrical and spherical projections"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Note**\n",
    "\n",
    "The support and handling of event data is currently being rewritten.\n",
    "The interface for manipulating event data (binned) data is not representative for the final API.\n",
    "\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "scn.instrument_view(sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot against scattering angle $\\theta$ using `groupby`\n",
    "\n",
    "*This is not an essential step and can be skipped.*\n",
    "\n",
    "Plotting raw data directly yields a hard-to-interpret figure.\n",
    "We can obtain something more useful by \"binning\" the spectrum axis based on its $\\theta$ value, using the split-apply-combine approach provided by `groupby`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample.coords['two_theta'] = scn.two_theta(sample)\n",
    "vanadium.coords['two_theta'] = scn.two_theta(vanadium)\n",
    "two_theta_bins = sc.Variable(['two_theta'],\n",
    "                             unit=sc.units.rad,\n",
    "                             values=np.linspace(0.0, np.pi, num=2000))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We concatenate events lists from different spectra that fall into a given $2\\theta$ range into longer combined lists:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "theta_sample = sc.groupby(sample, 'two_theta', bins=two_theta_bins).bins.concatenate('spectrum')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">\n",
    "\n",
    "**Note**\n",
    "    \n",
    "Use `groupby.sum` instead of `groupby.bins.concatenate` when working with dense (histogrammed) data\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "theta_sample"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.plot(theta_sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Unit conversion\n",
    "\n",
    "*Note: We are back to working with `sample`, not `theta_sample`.*\n",
    "\n",
    "`scippneutron` provides means to convert between units (dimensions) related to time-of-flight.\n",
    "The loaded raw data has `Dim.Tof`, and we convert to interplanar lattice spacing (dspacing):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dspacing_vanadium = scn.convert(vanadium, 'tof', 'dspacing', scatter=True, out=vanadium)\n",
    "dspacing_sample = scn.convert(sample, 'tof', 'dspacing', scatter=True)\n",
    "dspacing_sample"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Neutron monitors\n",
    "\n",
    "*This is an optional section.\n",
    "The next section does not use the monitor-normalized data produced here.\n",
    "This section could thus be skipped.*\n",
    "\n",
    "If available, neutron monitors are stored as attributes of a data array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "mon = sample.attrs['monitor1'].value\n",
    "mon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The monitor could, e.g., be used to normalize the data.\n",
    "To do so, both data and monitor need to be converted to a unit that accounts for differing flight paths, e.g., wavelength or energy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_lambda = scn.convert(sample, 'tof', 'wavelength', scatter=True)\n",
    "mon = scn.convert(mon, 'tof', 'wavelength', scatter=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The sample data is in event-mode, i.e., is not histogrammed.\n",
    "Event data *can* be divided by a histogram (such as `mon` in this case), using a specialized function for scaling (see [Binned data](https://scipp.github.io/user-guide/binned-data.html)).\n",
    "First we rebin the monitor since the original binning is very fine:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edges = sc.Variable(dims=['wavelength'], unit=sc.units.angstrom, values=np.linspace(0, 1, num=1000))\n",
    "mon = sc.rebin(mon, 'wavelength', edges)\n",
    "mon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The sample data is *event data in bins* and the monitor is a histogram.\n",
    "Multiplication and division operations for such cases are supported by modifying the weights (values) for each event using the operators of the `bins` property, in combination with the `sc.lookup` helper, a wrapper for a discrete \"function\", given by the monitor:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_over_mon = sample_lambda.bins / sc.lookup(func=mon, dim='wavelength')\n",
    "sample_over_mon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we can plot the event data with on-the-fly binning.\n",
    "By default, the `plot` function uses the coordinates of the binned data to define histogram edges, which, in this case, would give a single bin along the `'tof'` dimension.\n",
    "For a better representation of the data, we supply the bin edges to obtain a finer binning, yielding a more meaningful figure:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.plot(sample_over_mon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "del sample_lambda\n",
    "del sample_over_mon\n",
    "del sample\n",
    "del vanadium"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### From events to histogram\n",
    "\n",
    "*Note: We are continuing here with data that has not been normalized to the monitors.*\n",
    "\n",
    "We histogram the event data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "dspacing_bins = sc.Variable(\n",
    "    ['dspacing'],\n",
    "    values=np.arange(0.3, 2.0, 0.001),\n",
    "    unit=sc.units.angstrom)\n",
    "hist = sc.Dataset({'sample':sc.histogram(dspacing_sample, dspacing_bins),\n",
    "                   'vanadium':sc.histogram(dspacing_vanadium, dspacing_bins)})\n",
    "sc.show(hist['spectrum', 0:3]['dspacing', 0:7])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.plot(hist)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summing (focussing) and normalizing\n",
    "\n",
    "After conversion to `'dspacing'`, generic `sum` and `/` operations can be used to \"focus\" and normalize the diffraction data to the vanadium run:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "summed = sc.sum(hist, 'spectrum')\n",
    "sc.plot(summed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "normalized = summed['sample'] / summed['vanadium']\n",
    "sc.plot(normalized)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Focussing with $\\theta$ dependence in event-mode\n",
    "\n",
    "The approach used above combines reflections from all crystallographic planes and is therfore of limited use.\n",
    "We can use `groupby` to focus each of multiple groups of spectra into a distinct output spectrum.\n",
    "Here we define groups based on a range of scattering angles &ndash; a simple $\\theta$-dependent binning.\n",
    "This also demonstrates how we can postpone histogramming until after the focussing step."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "two_theta = sc.Variable(['two_theta'],\n",
    "                    unit=sc.units.rad,\n",
    "                    values=np.linspace(0.0, np.pi, num=16))\n",
    "\n",
    "focussed_sample = sc.groupby(dspacing_sample, 'two_theta', bins=two_theta).bins.concatenate('spectrum')\n",
    "focussed_vanadium = sc.groupby(dspacing_vanadium, 'two_theta', bins=two_theta).bins.concatenate('spectrum')\n",
    "norm = sc.histogram(focussed_vanadium, dspacing_bins)\n",
    "focussed_sample.bins /= sc.lookup(func=norm, dim='dspacing')\n",
    "normalized = sc.histogram(focussed_sample, dspacing_bins)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The normalized output looks as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.plot(normalized, vmin=0, vmax=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a bonus, we can use slicing and a dict-comprehension to quickly create of plot comparing the spectra for different scattering angle bins:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# compute centers of theta bins\n",
    "angles = normalized.coords['two_theta'].values\n",
    "angles = 0.5*(angles[1:] + angles[:-1])\n",
    "sc.plot({f'{round(angles[group], 3)} rad':\n",
    "         normalized['dspacing', 300:500]['two_theta', group]\n",
    "         for group in range(2,6)})"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
