{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Unit conversions\n",
    "\n",
    "## Available conversions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Time-of-flight neutron-scattering unit conversions implement the following conversions.\n",
    "For background we refer to PaN-learning on [Introduction to neutron scattering](https://pan-learning.org/wiki/index.php/Introduction_to_neutron_scattering) and [Basics of neutron scattering](https://pan-learning.org/wiki/index.php/Basics_of_neutron_scattering).\n",
    "In summary, in the table below for the supported unit conversions:\n",
    "\n",
    "- $h$ is the Planck constant, $m_{\\mathrm{n}}$ is the neutron mass.\n",
    "- $L_1$ is the primary flight path length, i.e., the distance between source and sample.\n",
    "  The source position defines the point where $t=0$ (or vice versa).\n",
    "- $L_2$ is the secondary flight path length, i.e., the distance(s) between sample and detector(s).\n",
    "- $L_{\\mathrm{total}} = L_1 + L_2$\n",
    "- $d$ is the interplanar lattice spacing\n",
    "- $\\theta$ is the scattering angle, as defined in Bragg's law, not to be confused with $\\theta_{\\mathrm{spherical}}$ in sperical coordinates.\n",
    "  In many instruments the beam is roughly aligned with the $z$-axis, so $2\\theta = \\theta_{\\mathrm{spherical}}$.\n",
    "  The factor of $2$ is a recurrent source of bugs.\n",
    "  \n",
    "In the special case of inelastic neutron scattering we have additionally:\n",
    "\n",
    "- $E_i$ is the known incident energy. This case is called *direct inelastic scattering*.\n",
    "  We define $t_0 = \\sqrt{L_1^2 \\cdot m_{\\mathrm{n}} / E_i}$\n",
    "- $E_f$ is the known final energy. This case is called *indirect inelastic scattering*.\n",
    "  We define $t_0 = \\sqrt{L_2^2 \\cdot m_{\\mathrm{n}} /E_F}$\n",
    "  In this case $E_f$ is actually determined by analyzer crystals in the secondary flight path.\n",
    "  It is assumed that the detector positions are set to the effective (neutronic) rather than physical positions, since the computation of $L_2$ assumes a straight line connection between sample and detectors.\n",
    "\n",
    "|Origin unit |Target unit |Formula  used for coord conversion |\n",
    "|---|---|:---|\n",
    "|`tof`|`dspacing`|$d = \\frac{\\lambda}{2\\sin(\\theta)} = \\frac{h \\cdot t}{L_{\\mathrm{total}} \\cdot m_{\\mathrm{n}} \\cdot 2 \\sin(\\theta)}$|\n",
    "|`dspacing`|`tof`|$t = \\frac{d \\cdot L_{\\mathrm{total}} \\cdot m_{\\mathrm{n}} \\cdot 2 \\sin(\\theta)}{h}$|\n",
    "| `tof`|`wavelength`|$\\lambda = \\frac{h \\cdot t}{m_{\\mathrm{n}} \\cdot L_{\\mathrm{total}}}$|\n",
    "|`wavelength`|`tof`|$t = \\frac{m_{\\mathrm{n}} \\cdot L_{\\mathrm{total}} \\cdot \\lambda}{h}$|\n",
    "| `tof`|`energy`|$E = \\frac{m_{\\mathrm{n}}L^2_{\\mathrm{total}}}{2t^2}$|\n",
    "| `tof`|`energy_transfer` (direct)|$E = E_i - \\frac{m_{\\mathrm{n}}L^2_{\\mathrm{2}}}{2\\left(t-t_0\\right)^{2}}$|\n",
    "| `tof`|`energy_transfer` (indirect)|$E = \\frac{m_{\\mathrm{n}}L^2_{\\mathrm{1}}}{2\\left(t-t_0\\right)^{2}} - E_f$|\n",
    "|`energy`|`tof`|$t = \\frac{L_{\\mathrm{total}}}{\\sqrt{\\frac{2 E}{m_{\\mathrm{n}}}}}$|"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Beamline geometry parameters used in unit conversions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "nbsphinx": "hidden"
   },
   "outputs": [],
   "source": [
    "from graphviz import Digraph\n",
    "dot = Digraph()\n",
    "dot.edge('source_position', 'incident_beam')\n",
    "dot.edge('sample_position', 'incident_beam')\n",
    "dot.edge('position', 'scattered_beam')\n",
    "dot.edge('sample_position', 'scattered_beam')\n",
    "dot.edge('incident_beam', 'L1', label='norm')\n",
    "dot.edge('scattered_beam', 'L2', label='norm')\n",
    "dot.edge('L1', 'Ltotal')\n",
    "dot.edge('L2', 'Ltotal')\n",
    "dot.edge('incident_beam', 'two_theta')\n",
    "dot.edge('scattered_beam', 'two_theta')\n",
    "dot.node('wavelength', shape='box', style='filled', color='lightgrey')\n",
    "dot.node('energy', shape='box', style='filled', color='lightgrey')\n",
    "dot.node('energy_transfer (direct)', shape='box', style='filled', color='lightgrey')\n",
    "dot.node('energy_transfer (indirect)', shape='box', style='filled', color='lightgrey')\n",
    "dot.node('dspacing', shape='box', style='filled', color='lightgrey')\n",
    "dot.node('Q', shape='box', style='filled', color='lightgrey')\n",
    "dot.edge('Ltotal', 'energy')\n",
    "dot.edge('L1', 'energy_transfer (direct)')\n",
    "dot.edge('L2', 'energy_transfer (direct)')\n",
    "dot.edge('incident_energy', 'energy_transfer (direct)')\n",
    "dot.edge('L1', 'energy_transfer (indirect)')\n",
    "dot.edge('L2', 'energy_transfer (indirect)')\n",
    "dot.edge('final_energy', 'energy_transfer (indirect)')\n",
    "dot.edge('Ltotal', 'wavelength')\n",
    "dot.edge('Ltotal', 'dspacing')\n",
    "dot.edge('two_theta', 'dspacing')\n",
    "dot.edge('two_theta', 'Q')\n",
    "dot.edge('wavelength', 'Q')\n",
    "scattering = dot\n",
    "\n",
    "dot = Digraph()\n",
    "dot.edge('source_position', 'Ltotal')\n",
    "dot.edge('position', 'Ltotal')\n",
    "dot.node('wavelength', shape='box', style='filled', color='lightgrey')\n",
    "dot.node('energy', shape='box', style='filled', color='lightgrey')\n",
    "dot.edge('Ltotal', 'energy')\n",
    "dot.edge('Ltotal', 'wavelength')\n",
    "nonscattering = dot\n",
    "\n",
    "def show_geometry_params(scatter):\n",
    "    if scatter:\n",
    "        display(scattering)\n",
    "    else:\n",
    "        display(nonscattering)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameters given in the table above are retrieved from the coordinates or attributes of the input data.\n",
    "The following graph illustrates which coords (or attrs) are known and used by `convert`.\n",
    "Read the graph as follows:\n",
    "\n",
    "- Ellipses represent geometry-related parameters of the beamline, e.g., `two_theta`.\n",
    "- The grey rectangles denote an input or output unit, e.g., `wavelength`.\n",
    "- A unit conversion involving a particular input or output unit will require the parameters connected to the rectangle by arrows.\n",
    "- If a unit conversion requires a parameter the tree of paramameter ellipses is searched bottom-up.\n",
    "\n",
    "Example:\n",
    "\n",
    "- Consider a unit conversion to `wavelength` (from, e.g., `tof`) *or* from `wavelength` (to, e.g., `tof`) will require the parameters connected to the rectangle by arrows, in this case `Ltotal`.\n",
    "- If a coord or attr with name `Ltotal` is found it is used for the conversion.\n",
    "- If `Ltotal` is not found it will be computed based on coords or attrs `L1` and `L2`.\n",
    "- If, e.g., `L2` is not found it is computed as the norm of the `scattered_beam` coord or attr.\n",
    "- If, `scattered_beam` is not found it us computed as `position - sample_position`.\n",
    "\n",
    "There are two cases, scattering conversion and non-scattering conversion (e.g., for beam monitors or for imaging beamlines).\n",
    "\n",
    "Case 1: `convert(..., scatter=True)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_geometry_params(scatter=True) # helper defined in hidden cell"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Case 2: `convert(..., scatter=False)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "show_geometry_params(scatter=False) # helper defined in hidden cell"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.10"
  },
  "toc-autonumbering": false,
  "toc-showcode": false,
  "toc-showmarkdowntxt": false,
  "toc-showtags": false
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
